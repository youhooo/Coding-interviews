输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，
则重建二叉树并输出它的后序遍历序列。

输入：
输入可能包含多个测试样例，对于每个测试案例，
输入的第一行为一个整数n(1<=n<=1000)：代表二叉树的节点个数。
输入的第二行包括n个整数(其中每个元素a的范围为(1<=a<=1000))：代表二叉树的前序遍历序列。
输入的第三行包括n个整数(其中每个元素a的范围为(1<=a<=1000))：代表二叉树的中序遍历序列。
输出：
对应每个测试案例，输出一行：
如果题目中所给的前序和中序遍历序列能构成一棵二叉树，则输出n个整数，代表二叉树的后序遍历序列，每个元素后面都有空格。
如果题目中所给的前序和中序遍历序列不能构成一棵二叉树，则输出”No”。
样例输入：
8
1 2 4 7 3 5 6 8
4 7 2 1 5 3 8 6
8
1 2 4 7 3 5 6 8
4 1 2 7 5 3 8 6
样例输出：
7 4 2 5 8 6 3 1 
No
 */
public class Offer06 {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
        while(sc.hasNext()){
            int num=sc.nextInt();
            int [] pre=new int[num];
            int [] mid=new int[num];
            for(int i=0;i<num;i++){
                pre[i]=sc.nextInt();
            }
            for(int i=0;i<num;i++){
                mid[i]=sc.nextInt();
            }
            String s="";
            TreeNode2 root=null;
            try {
                root= bulidtree(root,pre,0,pre.length-1,mid,0,mid.length-1);
            } catch (Exception e) {
                s="No";                 
            } 
            if(s=="No"){
                System.out.println(s);
            }else{               
                PostOrder(root);
                System.out.println();
            }            
        }
	}
	 public static TreeNode2 bulidtree(TreeNode2 root,int[] a,int alow,int ahigh,int[] b,int blow,int bhigh) throws Exception{
	        if(alow == ahigh){
	            if(a[alow]==b[blow]){   
	                return root=new TreeNode2(a[alow]);
	            }else{
	                  throw new Exception();
	            }
	        }else{
	            root=new TreeNode2(a[alow]);
	            int val=a[alow];
	            int i,d=-1;
	            for(i=0;i<(bhigh-blow+1);i++){
	                if(b[i+blow]==val){
	                    d=i;//找到中序遍历的根节点
	                    break;
	                }
	            }
	            if(d>0){
	                root.leftNode=bulidtree(root.leftNode,a,alow+1,alow+d,b,blow,blow+d-1);
	            }
	            if(d<bhigh-blow){
	                root.rightNode=bulidtree(root.rightNode,a,alow+d+1,ahigh,b,blow+d+1,bhigh);
	            }
	            return root;
	        }
	    }
	 public static void PostOrder(TreeNode2 node){			
		 if(node!=null){
				PostOrder(node.leftNode);
				PostOrder(node.rightNode);				
				System.out.print(node.value+" ");
			}
		}
	}

class TreeNode2{
	int value;
	TreeNode2 leftNode;
	TreeNode2 rightNode;
	public TreeNode2(int value) {
		this.value=value;
		this.leftNode=null;
		this.rightNode=null;
	}
}
